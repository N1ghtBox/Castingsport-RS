import {
  app,
  autoUpdater,
  BrowserWindow,
  dialog,
  ipcMain
} from "electron";
import isDev from "electron-is-dev";
import { readFileSync, writeFile, writeFileSync } from "jsonfile";
import { Db, MongoClient } from "mongodb";
import { writeFile as exportToPdf } from "original-fs";
import { SetupIpcMain } from "./IpcMainMaker";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const filePath = isDev ? "./data.json" : "./../data.json";

if (require("electron-squirrel-startup")) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = async (database: Db): Promise<void> => {
  const server = "https://hazel-n1ghtbox.vercel.app";
  const url = `${server}/update/${process.platform}/${app.getVersion()}`;

  autoUpdater.setFeedURL({ url });

  autoUpdater.on("update-downloaded", (event, releaseNotes, releaseName) => {
    const dialogOpts = {
      type: "info",
      buttons: ["Zaktualizuj", "Później"],
      title: "Aktualizacja",
      message: process.platform === "win32" ? releaseNotes : releaseName,
      detail: "Nowa wersja aplikacji. Czy chcesz zaktualizować?",
    };

    dialog.showMessageBox(dialogOpts).then((returnValue) => {
      if (returnValue.response === 0) autoUpdater.quitAndInstall();
    });
  });

  try {
    readFileSync(filePath);
    if (!isDev) autoUpdater.checkForUpdates();
  } catch (ex) {
    writeFileSync(filePath, {
      license: "",
      competitions: [],
      summaries: [],
      finals: [],
    });
  }

  mainWindow = new BrowserWindow({
    icon: "image.ico",
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setBackgroundColor("#f2f2f2");
  mainWindow.title = "Castingsport";
  mainWindow.maximize();
  mainWindow.menuBarVisible = false;

  SetupIpcMain(ipcMain,database);

  ipcMain.handle("exportToPdf", async (_: any, ...args: any[]) => {
    let path = dialog.showOpenDialogSync({
      properties: ["openDirectory"],
    });
    if (!path || path.length <= 0) mainWindow.webContents.send("success");
    mainWindow.webContents.printToPDF({}).then((data) => {
      exportToPdf(`${path[0]}/${args[0]}`, data, () => {
        mainWindow.webContents.send("success");
      });
    });
  });

  ipcMain.handle("exportList", async (_: any, ...args: any[]) => {
    let competetors = JSON.parse(args[0]);
    let data = competetors.map((comp: any) => {
      return {
        key: comp.key,
        girl: comp.girl,
        name: comp.name,
        team: comp.team,
        category: comp.category,
        club: comp.club,
      };
    });
    let path = dialog.showSaveDialogSync({
      filters: [{ name: "Plik JSON", extensions: ["json"] }],
    });
    await writeFile(`${path}`, { data });
    return true;
  });

  ipcMain.handle("printResults", async (_: any, ...args: any[]) => {
    mainWindow.webContents.print({}, (success, fail) => {
      if (fail === "Print job canceled") mainWindow.webContents.send("success");
      if (success) mainWindow.webContents.send("success");
    });
  });
};
app.on("ready", async () => {
  const dbClient = await MongoClient.connect("mongodb://127.0.0.1:27017/");
  const db = dbClient.db("Castingsport");
  createWindow(db);
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", async () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    const dbClient = await MongoClient.connect("mongodb://127.0.0.1:27017/");
    const db = dbClient.db("Castingsport");
    createWindow(db);
  }
});
